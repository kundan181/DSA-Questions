Approach 1
TC = O(n2) 

Node *removeDuplicates(Node *head)
{
 // your code goes here
    Node* current = head;
    if(head == NULL)
    {
        return NULL;
    }
    while(current)
    {
        while(current->next && current->data == current->next->data)
        {
            current->next = current->next->next;
        }
        current = current->next;
    }
    return head;
}

Approach 2
TC = O(n)
SC = O(1)

Node * uniqueSortedList(Node * head) {
    // Write your code here.

    if(head == NULL)
        return NULL;

    Node *current=head;

    while(current != NULL)
    {
        if((current->next != NULL) && current->data == current->next->data)
        {
            Node *nn = current->next->next;
            Node *nodetodelete = current->next;
            delete(nodetodelete);
            current->next = nn;
        }
        else{
            current = current->next;
        }
    }
    return head;
}
