Approach 1 
- count the no of 0 1 2 
- then replace that 0 1 2 with data present in that in ll


Node* sortList(Node *head)
{
    // Write your code here.
    int zeroCount = 0;
    int oneCount = 0;
    int twoCount = 0;

    Node* temp = head;

    //traverse the ll count the number
    while(temp != NULL)
    {
        if(temp->data == 0)
        {
            zeroCount++;
        }
        else if(temp->data == 1)
        {
            oneCount++;
        }
        else if(temp->data == 2)
        {
            twoCount++;
        }
        temp = temp->next;
    }

    temp = head;

    //replace the data in ll
    while(temp != NULL)
    {
        if(zeroCount != 0)
        {
            temp->data = 0;
            zeroCount--;
        }
        else if(oneCount != 0)
        {
            temp->data = 1;
            oneCount--;
        }
        else if(twoCount != 0)
        {
            temp->data = 2;
        }

        temp = temp->next;
    }
    return head;
}


Approach 2

Note - do not replace the data in the ll

- create the three dummy nodes

/********************************
    class Node
    {
    public:
        int data;
        Node *next;
        Node(int data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

********************************/
void insertAtTail(Node* &tail,Node* curr)
{
    tail->next = curr;
    tail = curr;
}

Node* sortList(Node *head)
{
    // Write your code here.
    //creating the three nodes
    Node* zeroHead = new Node(-1);
    Node* zeroTail = zeroHead;
    Node* oneHead = new Node(-1);
    Node* oneTail = oneHead;
    Node* twoHead = new Node(-1);
    Node* twoTail = twoHead;
    
    Node* curr = head;

    //create the seperate ll for 0s 1s 2s
    while(curr != NULL)
    {
        int value = curr->data;
        if(value == 0)
        {
            insertAtTail(zeroTail,curr);
        }
        else if(value == 1)
        {
            insertAtTail(oneTail,curr);
        }
        else if(value == 2)
        {
            insertAtTail(twoTail,curr);
        }

        curr = curr->next;
    }

    //merge three subll
    //1s list is not empty
    if(oneHead->next != NULL)
    {
        zeroTail->next = oneHead->next;
    }
    else{
        //1s list - empty
        zeroTail->next = twoHead->next;
    }
    oneTail->next = twoHead->next;
    twoTail->next = NULL;

    //setup
    head = zeroHead->next;

    //delete dummy nodes
    delete zeroHead;
    delete oneHead;
    delete twoHead;

    return head;
}
