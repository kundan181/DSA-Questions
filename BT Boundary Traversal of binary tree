class Solution {
public:

    void traversalLeft(Node *root, vector<int> &ans)
    {
        //base condition
        if((root == NULL)||(root->left == NULL && root->right == NULL))
            return;
            
            ans.push_back(root->data);
            if(root->left)
                traversalLeft(root->left,ans);
            else
                traversalLeft(root->right,ans);
    }
    
    void traverseLeaf(Node* root, vector<int> &ans)
    {
        //base cond
        if(root == NULL)
            return;
            
        if(root->left == NULL && root->right == NULL)
        {
            ans.push_back(root->data);
            return;
        }
        traverseLeaf(root->left,ans);
        traverseLeaf(root->right,ans);
        
    }
    
    void traverseRight(Node* root, vector<int> &ans)
    {
        //base cond
        if((root == NULL)||(root->left == NULL && root->right == NULL))
            return;
            
        //if right exist in trr
        if(root->right)
            traverseRight(root->right,ans);
        else
            traverseRight(root->left,ans);
            
        //wapas agaye
        ans.push_back(root->data);
        
    }
    vector <int> boundary(Node *root)
    {
        vector<int> ans;
        if(root == NULL)
            return ans;
            
        ans.push_back(root->data);
        
        //left part print/store 
        traversalLeft(root->left,ans);
        
        
        //traverse leaf nodes
        
        //left subtree
        traverseLeaf(root->left,ans);
        
        //right subtree
        traverseLeaf(root->right,ans);
        
        //right part print/store
        traverseRight(root->right,ans);
        
        return ans;
        
    }
};
