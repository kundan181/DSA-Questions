//insertion time complexity in BST O(logN) 

#include <bits/stdc++.h>
using namespace std;

class Node
{

public:
    int data;
    Node *left;
    Node *right;

    Node(int d)
    {
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
};

Node *inserIntoBST(Node *root, int d)
{
    if(root == NULL)
    {
        root = new Node(d);
        return root;
    }

    if(d > root->data)
    {
        //right part mai insert karna hai
        root->right = inserIntoBST(root->right, d);
    }
    else{
        //left part mai insert karna hai
        root->left = inserIntoBST(root->left,d);
    }


}
void takeInput(Node* &root)
{
    int data;
    cin >> data;

    while (data != -1)
    {
        root = inserIntoBST(root, data);
        cin>>data;
    }
}

void levelOrderTraversal(Node *root)
{
    queue<Node*> q;
    q.push(root);
    q.push(NULL);

    while (!q.empty())
    {
        Node *temp = q.front();
        q.pop();

        if (temp == NULL)
        {
            // purna level complete traverse ho chuka hai
            cout << endl;
            if (!q.empty())
            {
                // queue still have some child nodes
                q.push(NULL);
            }
        }
        else
        {
            cout << temp->data << " ";
            if (temp->left)
            {
                q.push(temp->left);
            }
            if (temp->right)
            {
                q.push(temp->right);
            }
        }
    }
}

int main()
{
    Node *root = NULL;

    cout << "\nEnter the data into BST = ";
    takeInput(root);
    cout<<"\nPrinting the BST = ";
    levelOrderTraversal(root);
}
